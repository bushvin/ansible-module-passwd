#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2018 William Leemans <willie@elaba.net>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
author: William Leemans
module: passwd
short_description: Update a user's password
description:
  - This module allows a user to change a his own or a different user's password
version_added: 2.5
options:
  username:
    description:
      - The name of the user you want to change the password for.
      - When left empty, passwd is executed on the currently logged in user.
    required: False
  current_passwd:
    description:
      - The current password of the user if not root
    required: False
  new_passwd:
    description:
      - The new password to be set for the user
    required: False
  binary:
    default: /usr/bin/passwd
    description:
      - The full path to the passwd binary
    required: False
  timeout:
    default: 30
    description:
      - The amount of time pexpect has to wait for a pattern
    required: False
notes:
  - tested on Red Hat Enterprise Linux 6.9 and 7.4
'''

EXAMPLES = '''
# Change the password of the current user
- action: passwd current_passwd='my super secret password' new_password='my new super secret password'

# Change the password for another user as root
- action: passwd user=myuser new_password='new super secret password'
  become_user: root
  become: True
'''

import sys
import getpass

try:
    import pexpect
except:
    print "failed=True msg='pexpect python module unavailable'"
    sys.exit(1)

def main():
    module = AnsibleModule(
        argument_spec = dict(
            username        = dict(required = False, default = None),
            current_passwd  = dict(required = False, default = None, no_log = True),
            new_passwd      = dict(required = False, default = None, no_log = True),
            binary          = dict(required = False, default = '/usr/bin/passwd', no_log = False),
            timeout         = dict(required = False, type = 'int', default = 30)
        ),
        supports_check_mode = False
    )

    username        = module.params.get('username')
    current_passwd  = module.params.get('old_passwd')
    new_passwd      = module.params.get('new_passwd')
    binary          = module.params.get('binary')
    timeout         = module.params.get('timeout')

    prompt_old_passwd = False
    prompt_new_passwd = False
    confirm_new_passwd = False
    username = getpass.getuser()

    platform       = get_platform()
    distro         = get_distribution()
    distro_version = get_distribution_version()

    if platform == "Linux":
        if username != 'root':
            prompt_old_passwd = True
        prompt_new_passwd = True
        confirm_new_passwd = True

    if username is not None:
        cmdline.append(username)
    
    args = []
    if username is not None:
        args.append(username)

    pechild = pexpect.spawn(binary, args=args, timeout=timeout)

    if prompt_old_passwd:
        try:
            pechild.expect(['^\(current\) UNIX password:','^Current password for'])
            pechild.sendline(current_passwd)
        except pexpect.TIMEOUT:
            module.fail_json(msg="There was no prompt for the old password")
        except pexpect.EOF:
            module.fail_json(msg="There was no prompt for the old password")
        except:
            module.fail_json(msg="There was a serious error prompting for the old password")

    if prompt_new_passwd:
        try:
            pechild.expect('New password:')
            pechild.sendline(new_passwd)
        except pexpect.TIMEOUT:
            module.fail_json(msg="There was no prompt for the new password")
        except pexpect.EOF:
            module.fail_json(msg="There was no prompt for the new password")
        except:
            module.fail_json(msg="There was a serious error prompting for the new password")

    if confirm_new_passwd:
        try:
            pechild.expect('Retype new password:')
            pechild.sendline(new_passwd)
        except pexpect.TIMEOUT:
            module.fail_json(msg="There was no prompt for confirming the new password")
        except pexpect.EOF:
            module.fail_json(msg="There was no prompt for confirming the new password")
        except:
            module.fail_json(msg="There was a serious error prompting for the confirmation of the new password")

    if prompt_old_passwd or prompt_new_passwd or confirm_new_passwd:
        pechild.expect(pexpect.EOF)
        if pechild.exitstatus == 0:
            module.exit_json(changed=True,msg="Successfully changed the password")
        else:
            module.fail_json(msg="There was a general error changing the password")
    else:
        result = dict(
                platform = platform,
                distro = distro,
                distro_version = distro_version
                )
        module.fail_json(msg="This distribution is not supported", **result)

from ansible.module_utils.basic import *

main()

